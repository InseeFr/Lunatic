name: Main CI
on:
  push:
    # on branche like main or 2.6, 2.64
    branches: ['main', '2.*']
  pull_request:
    branches: ['main', '2.*']

jobs:
  test_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: bahmutov/npm-install@v1
      - name: If this step fails run 'yarn lint' and 'yarn format' then commit again.
        run: |
          yarn lint:check
          yarn format:check
  test:
    runs-on: ${{ matrix.os }}
    needs: test_lint
    strategy:
      matrix:
        node: ['16', '20']
        os: [ubuntu-latest]
    name: Test with Node v${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - uses: bahmutov/npm-install@v1
      - name: Check Typing
        run: yarn run check
      - name: Unit Tests
        run: yarn run test
      - name: Install Playwright Browsers
        run: yarn playwright install --with-deps
      - name: Build Storybook
        run: yarn run build-storybook --quiet
      - name: E2E Tests
        run: npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" "npx http-server storybook-static --port 9999 --silent" "npx wait-on tcp:9999 && yarn run test:e2e"
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build-assets:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: bahmutov/npm-install@v1
      # Build Storybook v2
      - run: yarn build-storybook
      - run: mkdir -p deploy/storybook
      - run: cp -R ./storybook-static/. ./deploy-${{ steps.branch-name.outputs.current_branch }}/storybook-${{ steps.branch-name.outputs.current_branch }}
      # Add json to fetch for suggester stories
      - run: cp -a ./public/. ./deploy-${{ steps.branch-name.outputs.current_branch }}/storybook-${{ steps.branch-name.outputs.current_branch }}
      - uses: actions/setup-node@v3
        with:
          # Because of gitbook support
          node-version: 10
      - run: |
          npm i -g gitbook-cli
          gitbook install
          gitbook build
        working-directory: ./docs/
      - run: cp -a ./docs/_book/. ./deploy-${{ steps.branch-name.outputs.current_branch }}/
      - name: Upload deploy artifact
        uses: actions/upload-artifact@v3
        with:
          name: deploy-${{ steps.branch-name.outputs.current_branch }}
          path: deploy-${{ steps.branch-name.outputs.current_branch }}/

  deploy:
    runs-on: ubuntu-latest
    needs: build-assets
    steps:
      - uses: actions/checkout@v3
        with:
          ref: gh-pages
      - name: Download deploy artifact
        uses: actions/download-artifact@v3
        with:
          name: deploy-${{ steps.branch-name.outputs.current_branch }}
      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          author_name: 'Github action'
          message: 'Update main assets'
          branch: 'gh-pages'

  check_if_version_upgraded:
    name: Check if version upgrade
    # When someone forks the repo and opens a PR we want to enables the tests to be run (the previous jobs)
    # but obviously only us should be allowed to release.
    # In the following check we make sure that we own the branch this CI workflow is running on before continuing.
    # Without this check, trying to release would fail anyway because only us have the correct secret.NPM_TOKEN but
    # it's cleaner to stop the execution instead of letting the CI crash.
    if: |
      github.event_name == 'push' || 
      github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login
    runs-on: ubuntu-latest
    needs: test
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{ steps.step1.outputs.is_upgraded_version }}
      is_pre_release: ${{steps.step1.outputs.is_pre_release }}
    steps:
      - uses: garronej/ts-ci@v2.1.0
        id: step1
        with:
          action_name: is_package_json_version_upgraded
          branch: ${{ github.head_ref || github.ref }}

  create_github_release:
    runs-on: ubuntu-latest
    # We create release only if the version in the package.json have been upgraded and this CI is running against the main branch.
    # We allow branches with a PR open on main to publish pre-release (x.y.z-rc.u) but not actual releases.
    if: |
      needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true' &&
      (
        github.event_name == 'push' ||
        needs.check_if_version_upgraded.outputs.is_pre_release == 'true'
      )
    needs:
      - check_if_version_upgraded
    steps:
      - uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.check_if_version_upgraded.outputs.to_version }}
          tag_name: ${{ needs.check_if_version_upgraded.outputs.to_version }}
          target_commitish: ${{ github.head_ref || github.ref }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ needs.check_if_version_upgraded.outputs.is_pre_release == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_on_npm:
    runs-on: ubuntu-latest
    needs:
      - create_github_release
      - check_if_version_upgraded
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-node@v3
        with:
          registry-url: https://registry.npmjs.org/
      - uses: bahmutov/npm-install@v1
      - run: yarn build
      - name: Publishing on NPM
        run: |
          if [ "$(npm show . version)" = "$VERSION" ]; then
            echo "This version is already published"
            exit 0
          fi
          if [ "$NODE_AUTH_TOKEN" = "" ]; then
            echo "Can't publish on NPM, You must first create a secret called NPM_TOKEN that contains your NPM auth token. https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets"
            false
          fi
          EXTRA_ARGS=""
          if [ "$IS_PRE_RELEASE" = "true" ]; then
              EXTRA_ARGS="--tag beta"
          fi
          npm publish $EXTRA_ARGS
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
          VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
          IS_PRE_RELEASE: ${{ needs.check_if_version_upgraded.outputs.is_pre_release }}
