{"version":3,"sources":["img/lunatic-logo.png","orchestrator.js","index.js"],"names":["module","exports","__webpack_require__","p","isComponentsConcernedByResponse","responseName","component","response","name","options","filter","o","length","Orchestrator","_useState","useState","simspons","_useState2","Object","slicedToArray","questionnaire","setQuestionnaire","onChange","update","valueType","_Object$entries$","entries","value","components","reduce","_","c","push","objectSpread","valueState","__","v","concat","toConsumableArray","console","log","componentType","cells","updateQuestionnaire","map","q","id","Component","lunatic","react_default","a","createElement","className","key","assign","handleChange","labelPosition","preferences","Fragment","alt","src","logo","ReactDOM","render","orchestrator","document","getElementById"],"mappings":"suuCAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4PC+BlCC,SAAkC,SAAAC,GAAY,OAAI,SAAAC,GAAS,OAC/DA,EAAUC,UAAYD,EAAUC,SAASC,OAASH,GAClDC,EAAUG,SAGG,IAFbH,EAAUG,QAAQC,OACjB,SAAAC,GAAC,OAAIA,EAAEJ,UAAYI,EAAEJ,SAASC,OAASH,IACtCO,UAkCWC,EAhCM,WAAM,IAAAC,EACgBC,mBAASC,GADzBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACnBM,EADmBH,EAAA,GACJI,EADIJ,EAAA,GAEpBK,EAAW,SAAAC,GAlCU,IAAAC,EAmC1BH,GAnC0BG,EAmCW,SAnCE,SAAAJ,GAAa,OAAI,SAAAG,GAAU,IAAAE,EAAAP,OAAAC,EAAA,EAAAD,CAC7CA,OAAOQ,QAAQH,GAAQ,GADsB,GAC5Df,EAD4DiB,EAAA,GACtDE,EADsDF,EAAA,GAE7DG,EAAaR,EAAcQ,WAAWC,OAAO,SAACC,EAAGC,GACtD,OAAK3B,EAAgCI,EAAhCJ,CAAsC2B,IAGhCA,EAAExB,SACZuB,EAAEE,KAAFd,OAAAe,EAAA,EAAAf,CAAA,GACIa,EADJ,CAECxB,SAASW,OAAAe,EAAA,EAAAf,CAAA,GACLa,EAAExB,SADE,CAEP2B,WAAYH,EAAExB,SAAS2B,WAAWL,OAAO,SAACM,EAAIC,GAC7C,OAAIA,EAAEZ,YAAcA,EAAW,GAAAa,OAAAnB,OAAAoB,EAAA,EAAApB,CAAWiB,GAAX,CAAAjB,OAAAe,EAAA,EAAAf,CAAA,GAAoBkB,EAApB,CAAuBT,YACtD,GAAAU,OAAAnB,OAAAoB,EAAA,EAAApB,CAAWiB,GAAX,CAAeC,KACb,SAGKL,EAAEtB,QAAS8B,QAAQC,IAAI,UAAWT,EAAEU,eACtCV,EAAEW,MAAOH,QAAQC,IAAI,QAAST,EAAEU,eACpCX,EAAEE,KAAKD,GACLD,IAhBNA,EAAEE,KAAKD,GACAD,IAgBN,IACH,OAAOZ,OAAAe,EAAA,EAAAf,CAAA,GAAKE,EAAZ,CAA2BQ,kBAaqBR,EAA9BuB,CAA6CpB,KAE/DgB,QAAQC,IAAIpB,EAAcQ,YAC1B,IAAMA,EAAaR,EAAcQ,WAAWgB,IAAI,SAAAC,GAAK,IAC5CC,EAAsBD,EAAtBC,GAAIL,EAAkBI,EAAlBJ,cACNM,EAAYC,EAAQP,GAC1B,OACCQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BC,IAAG,aAAAhB,OAAeS,IAC5DG,EAAAC,EAAAC,cAACJ,EAAD7B,OAAAoC,OAAA,GACKT,EADL,CAECU,aAAcjC,EACdkC,cAAc,MACdC,YAAa,CAAC,YAAa,gBAK/B,OACCR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcO,IAAI,UAAUC,IAAKC,OAEjDZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcxB,YC3DjCkC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAAkBC,SAASC,eAAe","file":"static/js/main.e2ed4da2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lunatic-logo.f2d2cbf3.png\";","import React, { useState } from 'react';\nimport * as lunatic from '@inseefr/lunatic';\nimport simspons from './simpsons';\nimport logo from './img/lunatic-logo.png';\nimport './custom-lunatic.scss';\n\nconst updateQuestionnaire = valueType => questionnaire => update => {\n\tconst [name, value] = Object.entries(update)[0];\n\tconst components = questionnaire.components.reduce((_, c) => {\n\t\tif (!isComponentsConcernedByResponse(name)(c)) {\n\t\t\t_.push(c);\n\t\t\treturn _;\n\t\t} else if (c.response) {\n\t\t\t_.push({\n\t\t\t\t...c,\n\t\t\t\tresponse: {\n\t\t\t\t\t...c.response,\n\t\t\t\t\tvalueState: c.response.valueState.reduce((__, v) => {\n\t\t\t\t\t\tif (v.valueType === valueType) return [...__, { ...v, value }];\n\t\t\t\t\t\treturn [...__, v];\n\t\t\t\t\t}, []),\n\t\t\t\t},\n\t\t\t});\n\t\t} else if (c.options) console.log('options', c.componentType);\n\t\telse if (c.cells) console.log('cells', c.componentType);\n\t\telse _.push(c);\n\t\treturn _;\n\t}, []);\n\treturn { ...questionnaire, components };\n};\n\nconst isComponentsConcernedByResponse = responseName => component =>\n\t(component.response && component.response.name === responseName) ||\n\t(component.options &&\n\t\tcomponent.options.filter(\n\t\t\to => o.response && o.response.name === responseName\n\t\t).length !== 0);\n\nconst Orchestrator = () => {\n\tconst [questionnaire, setQuestionnaire] = useState(simspons);\n\tconst onChange = update => {\n\t\tsetQuestionnaire(updateQuestionnaire('FORCED')(questionnaire)(update));\n\t};\n\tconsole.log(questionnaire.components);\n\tconst components = questionnaire.components.map(q => {\n\t\tconst { id, componentType } = q;\n\t\tconst Component = lunatic[componentType];\n\t\treturn (\n\t\t\t<div className=\"lunatic lunatic-component\" key={`component-${id}`}>\n\t\t\t\t<Component\n\t\t\t\t\t{...q}\n\t\t\t\t\thandleChange={onChange}\n\t\t\t\t\tlabelPosition=\"TOP\"\n\t\t\t\t\tpreferences={['COLLECTED', 'FORCED']}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t});\n\treturn (\n\t\t<>\n\t\t\t<div className=\"lunatic-img-container\">\n\t\t\t\t<img className=\"lunatic-img\" alt=\"lunatic\" src={logo} />\n\t\t\t</div>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"components\">{components}</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Orchestrator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Orchestrator from './orchestrator';\nimport './index.scss';\n\nReactDOM.render(<Orchestrator />, document.getElementById('root'));\n"],"sourceRoot":""}